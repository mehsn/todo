{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","component/TodoEntry.js","component/TodoItem.js","component/TodoItems.js","component/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","Object","classCallCheck","this","esm_initializerDefineProperty","_descriptor","_descriptor2","TodoStore","itemsActive","i","todos","length","splice","console","log","observable","action","todoStore","lastID","d","x","activeNum","push","type","showModel","TodoEntry","observer","state","value","handleKeyDown","event","keyCode","_this","preventDefault","addTodo","setState","_this2","react_default","a","createElement","className","onChange","target","onKeyDown","placeholder","Component","TodoItem","onToggle","props","todo","toggle","ddl","todoDel","checked","onClick","TodoItems","map","component_TodoItem","TodoFooter","setShowModel","completedDelete","class","data-reactid","href","allItems","activeItems","leftItems","style","float","marginRight","cursor","App","component_TodoEntry","component_TodoItems","component_TodoFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23e46cc4.chunk.js","sourcesContent":["import {observable, action} from 'mobx'\nimport TodoStore from \"../stores/TodoStore\";\n\nexport default class TodoModel {\n   store\n    id \n   @observable title\n   @observable completed\n   \n   constructor(store , title ,completed , id){\n       this.title = title\n       this.completed =completed\n       this.id =id\n       this.store =store\n    }\n\n   @action\n   toggle(){\n       this.completed = !this.completed ;\n       TodoStore.itemsActive()\n \n   }\n   \n   @action\n   todoDel(){  \n        for (var i = 0; i < TodoStore.todos.length; i++) {\n           \n            if (TodoStore.todos[i].id === this.id ) {\n                \n                TodoStore.todos.splice(i, 1);\n                console.log(\"delete\")\n                i--;\n            }else{\n                console.log(\"nof fund\")\n            }\n        } \n        TodoStore.itemsActive()\n\n   }\n\n\n\n}\n","import {observable, action, computed} from 'mobx'\nimport TodoModel from \"./TodoModel\";\n\nclass TodoStore {\n\n    @observable todos = [] ;\n    \n    @observable showModel = \"all\"  ;\n    \n    @observable activeNum = 0 ;\n\n    lastID=0\n\n    @action\n    itemsActive(){\n        let d = 0;\n        for (let x = 0; x < this.todos.length; x++) {\n                \n            if(this.todos[x].completed !== true){\n                d++ ;                           \n            }\n            \n        }\n        this.activeNum=d\n    }\n    @action\n    addTodo(title){\n        this.todos.push(new TodoModel( this , title , false , this.lastID ++))\n        this.itemsActive()\n    }\n\n    @action\n    setShowModel(type){ \n            this.showModel = type\n    }\n\n    \n\n    @action\n    completedDelete(){  \n         for (var i = 0; i < this.todos.length; i++) {\n         \n             if (this.todos[i].completed === true ) {\n                 \n                this.todos.splice(i, 1);\n                 i--;\n             }else{\n                 console.log(\"nof fund\")\n             }\n         } \n    }\n \n\n\n}\n\nconst todoStore = new TodoStore()\nexport default todoStore\n","import React, {Component} from 'react';\nimport {observer} from 'mobx-react'\nimport TodoStore from \"../stores/TodoStore\";\nimport todoStore from '../stores/TodoStore';\n\n@observer\nclass TodoEntry extends Component {\n    state = { value : \"\"  }\n\n    handleKeyDown = event => {\n        if(event.keyCode !== 13 || this.state.value === '' ){\n            return\n        }else{\n            event.preventDefault();\n            todoStore.addTodo(this.state.value)\n            this.setState({\n                value: ''\n            }) \n        }\n    }\n    render() {\n        return ( \n            \n            <header className=\"header\" >\n                <h1>todo</h1>\n                <input\n                    value={this.state.value}\n                    onChange={ event => this.setState({ value :event.target.value }) } \n                    onKeyDown={event=> this.handleKeyDown(event) }\n                    type=\"text\"\n                    className=\"new-todo\"\n                    placeholder=\"what ?\"\n                />\n\n            </header>\n        )\n    }\n}\nexport default TodoEntry;\n","import React, {Component} from 'react';\nimport {observer} from 'mobx-react'\nimport TodoStore from \"../stores/TodoStore\";\n\n@observer\nclass TodoItem extends Component {\n    \n    onToggle=()=>{\n        this.props.todo.toggle()\n       \n    }\n    ddl= () =>{\n        this.props.todo.todoDel()\n    }\n\n\n    \n    render() {\n        const {todo} = this.props ;\n        return ( \n             \n            <li className={todo.completed ? 'completed' : '' } >\n                <div className=\"view\" >\n\n                    <input type=\"checkbox\" className=\"toggle\" \n                              value=\"on\" checked={todo.completed} onChange={this.onToggle} />\n\n                    <label> {todo.title} </label>\n                    \n                    <button className=\"destroy\" onClick={ this.ddl  } />\n                \n                </div>\n            </li>\n            \n        )\n    }\n}\nexport default TodoItem;\n","import React, {Component} from 'react';\nimport {observer} from 'mobx-react'\nimport TodoItem from \"./TodoItem\";\nimport TodoStore from '../stores/TodoStore';\n\n@observer\nclass TodoItems extends Component {\n \n\n    render() {\n        return ( \n        <section className=\"main\" >\n            <ul className=\"todo-list\" >\n                {\n                    TodoStore.todos.map(todo =>{\n                        console.log(TodoStore.showModel)\n\n                        if(TodoStore.showModel === \"all\"){\n                            \n                            return( <TodoItem todo={todo} /> )\n\n                        }else if(TodoStore.showModel === \"active\"){\n                            if(todo.completed !== true){ \n                                return( <TodoItem todo={todo} /> )\n\n                            }\n                        }else if(TodoStore.showModel === \"left\"){\n                           \n                            if(todo.completed === true){ \n                                return( <TodoItem todo={todo} /> )\n\n                            }\n                         }   \n                     \n                    })\n                }\n              \n            </ul>\n\n        </section>\n\n        )\n    }\n}\nexport default TodoItems;\n","import React, {Component} from 'react';\nimport {observer} from 'mobx-react'\nimport TodoItems from \"./TodoItems\";\nimport TodoStore from '../stores/TodoStore';\n\n@observer\nclass TodoFooter extends Component {\n     \n\n    allItems(){ \n        TodoStore.setShowModel(\"all\") ;\n    }   \n    activeItems(){\n        TodoStore.setShowModel(\"active\") ;\n    }\n    leftItems(){ \n        TodoStore.setShowModel(\"left\") ;\n    }\n\n    completedDelete(){\n        TodoStore.completedDelete()\n    }\n\n\n    render() {\n\n               return ( \n            <footer class=\"footer\" data-reactid=\".0.2\">\n                <span class=\"todo-count\" data-reactid=\".0.2.0\">\n                    <strong data-reactid=\".0.2.0.0\"> \n                    </strong>\n                    <span data-reactid=\".0.2.0.1\">  {TodoStore.activeNum }   </span>\n                    <span data-reactid=\".0.2.0.2\">items</span>\n                    <span data-reactid=\".0.2.0.3\"> Active</span>\n                </span>\n                <ul class=\"filters\" data-reactid=\".0.2.1\">\n                    <li data-reactid=\".0.2.1.0\">\n                        <a href=\"#/\" class={TodoStore.showModel===\"all\" ? \"selected\" : \"\" } onClick={this.allItems} data-reactid=\".0.2.1.0.0\">{TodoStore.todos.length }  All</a>\n                    </li>\n                    \n                    <span data-reactid=\".0.2.1.1\"> </span>\n                    \n                    <li data-reactid=\".0.2.1.2\">\n                        <a href=\"#/active\" class={TodoStore.showModel===\"active\" ? \"selected\" : \"\" } onClick={this.activeItems} data-reactid=\".0.2.1.2.0\">Active</a>\n                    </li>\n                    \n                    <span data-reactid=\".0.2.1.3\"> </span>\n                    \n                    <li data-reactid=\".0.2.1.4\">\n                        <a href=\"#/completed\" class={TodoStore.showModel===\"left\" ? \"selected\" : \"\" } onClick={this.leftItems}  data-reactid=\".0.2.1.4.0\">Completed</a>\n                    </li>\n\n                        <li data-reactid=\".0.2.1.0\">\n                        <button style={{float:\"right\",marginRight:\"5px\",cursor:\"pointer\"}} onClick={this.completedDelete} data-reactid=\".0.2.1.0.0\"> Completed delete </button>\n                    </li>\n                    \n                 </ul>\n            </footer>\n\n        )\n    }\n}\nexport default TodoFooter;\n","import React, {Component} from 'react';\nimport {observer} from 'mobx-react'\nimport './App.css'; \nimport TodoEntry from \"./component/TodoEntry\";\nimport TodoItems from \"./component/TodoItems\";\nimport TodoFooter from \"./component/TodoFooter\";\n\n@observer\nclass App extends Component {\n    render() {\n        return (\n        <div id=\"App\" >\n            <div id=\"todoapp\" className=\"todoapp\">\n                               \n                                \n                <TodoEntry />\n                <TodoItems />\n                <TodoFooter />                 \n                \n             </div>   \n        </div>\n        )\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}